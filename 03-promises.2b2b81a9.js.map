{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAQC,SAASC,cAAc,uBAC/BC,EAAOF,SAASC,cAAc,sBAC9BE,EAASH,SAASC,cAAc,wBAItC,SAASG,EAAcC,EAAUC,GAW7B,OAVgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,EAAUQ,MAAAP,IAEpBG,EAAO,C,SAAEJ,EAAUQ,MAAAP,MAEpBA,MAZSN,SAASC,cAAc,yBAiB7Ba,iBAAiB,SAASC,IAClCA,EAAEC,iBACF,IAAIC,EAAaC,OAAOnB,EAAMoB,OAC1BC,EAAYF,OAAOhB,EAAKiB,OAC5B,IAAK,IAAIE,EAAI,EAAGA,EAAIlB,EAAOgB,MAAOE,IAChCjB,EAAc,EAAIiB,EAAGJ,EAAaI,EAAID,GACnCE,MAAK,EAACjB,SAAEA,EAAUQ,MAAAU,MACjBC,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqBrB,QAAiBkB,UAGzCI,OAAM,EAACtB,SAAEA,EAAUQ,MAAAe,MAClBJ,EAAA3B,GAAS4B,OAAOI,QACd,sBAAoBxB,QAAiBuB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst btnSubmit = document.querySelector('button[type=\"submit\"]');\n//console.log(btnSubmit);\n\nfunction createPromise(position, delay) {\n    const promise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n    return promise;\n  }\n  \n  btnSubmit.addEventListener('click', e => {\n    e.preventDefault();\n    let firstDelay = Number(delay.value);\n    let delayStep = Number(step.value);\n    for (let i = 0; i < amount.value; i++) {\n      createPromise(1 + i, firstDelay + i * delayStep)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  });\n\n\n// 1. Є функція createPromise(position, delay) - ВАЖЛИВО - вона повинна ВЕРТАТИ новий Promise\n// 2. У тілі промісу, повинна бути затримка виклику колбеків resolve і reject, яка задається через параметр delay з функції (підказка - setTimeout).\n// 3. До тіла промісу потрібно причепити методи then і catch, які будуь виконуватися з аргументами з колбеків resolve та reject. Аргументом що в resolve, що в reject буде об’єкт { position, delay }, а then і catch будуть виконувати свій колбек з переданими їм аргументами (у завданні колбеком методів всередині then i catch буде console.log)\n// 4. Все, ви написали проміс, результат виконання якого ми отримаємо через delay часу, це готово.\n// 5. Далі потрібно подумати, як нам визивати цей проміс потрібну кількість разів.\n// 6. Подумали, придумали - добре, потім, на кожній ітерації виклику функції createPromise(position, delay), потрібно додавати +1 до position, і +delay до delay з поля “Delay step”.\n// 7. Потім, потрібно буде врахувати ще умову з first delay, але тут буквально один if на 3 строки коду."],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$delay","document","querySelector","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay1","Promise","resolve","reject","setTimeout","Math","random","delay","addEventListener","e","preventDefault","firstDelay","Number","value","delayStep","i","then","delay2","$parcel$interopDefault","Notify","success","catch","delay3","failure"],"version":3,"file":"03-promises.2b2b81a9.js.map"}